View(test)
seqs<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Asian_WGS/Outputs/Asian_WGS_sequence_data.csv")
seqs<-read.csv("~/Documents/GitHub/RABV_lineages_all/Asian_N/Outputs/Asian_N_sequence_data.csv")
which(test$nam %in% seqs$ID)
test$nam
seqs$ID
seqs_whole<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Asian_WGS/Outputs/Asian_WGS_sequence_data.csv")
which(test$nam %in% seqs_whole$ID)
length(which(test$nam %in% seqs_whole$ID))
"%notin%"<-Negate("%in%")
which(test$nam %in% seqs$ID)
seqs<-read.csv("~/Documents/GitHub/RABV_lineages_all/Asian_N/Outputs/Asian_N_sequence_data.csv")
which(test$nam %in% seqs$ID)
test$nam
which(test$nam %in% seqs$ID)
length(which(test$nam %in% seqs_whole$ID))
which(test$nam %notin% seqs_whole$ID)
test$nam[which(test$nam %notin% seqs_whole$ID)]
seqs_whole<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Africa_WGS/Outputs/Asian_WGS_sequence_data.csv")
seqs_whole<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Africa_WGS/Outputs/Africa_WGS_sequence_data.csv")
test$nam[which(test$nam %notin% seqs_whole$ID)]
test$nam[which(test$nam %in% seqs_whole$ID)]
seqs_whole<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Arctic_WGS/Outputs/Arctic_WGS_sequence_data.csv")
test$nam[which(test$nam %in% seqs_whole$ID)]
length(test$nam[which(test$nam %in% seqs_whole$ID)])
46+153
rm(list=ls())
test<-seqinr::read.alignment("~/Downloads/RABV.fasta", format = "fasta")
seqs_Asian<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Asian_WGS/Outputs/Asian_WGS_sequence_data.csv")
seqs_Arctic<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Arctic_WGS/Outputs/Arctic_WGS_sequence_data.csv")
seqs_Africa<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Africa_WGS/Outputs/Africa_WGS_sequence_data.csv")
seqs_Cosmo<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Cosmo_WGS/Outputs/Cosmo_WGS_sequence_data.csv")
seqs_Vac<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Vac_WGS/Outputs/Vac_WGS_sequence_data.csv")
seqs_Bat<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/Bat_WGS/Outputs/Bat_WGS_sequence_data.csv")
seqs_RAC<-read.csv("~/Documents/GitHub/RABV_lineages_all/Lineages/RAC-SK_WGS/Outputs/RAC-SK_WGS_sequence_data.csv")
seqs<-rbind(seqs_Africa, seqs_Arctic, seqs_Asian, seqs_Bat, seqs_Cosmo, seqs_RAC, seqs_Vac)
length(test$nam[which(test$nam %in% seqs$ID)])
"%notin%"<-Negate("%in%")
length(test$nam[which(test$nam %notin% seqs$ID)])
test$nam[which(test$nam %notin% seqs$ID)]
yes<-seqs[which(seqs$ID %in% test$nam),]
View(yes)
no<-test$nam[which(test$nam %notin% seqs$ID)]
no
lineages<-read.csv("~/MADDOG/inst/extdata/References/RABV/lineage_info.csv")
unique(yes$lineage)
length(unique(yes$lineage))
which(lineages$lineage %in% yes$lineage)
length(which(lineages$lineage %in% yes$lineage))
yes$lineage[which(yes$lineage %notin% lineages$lineage)]
unique(yes$lineage[which(yes$lineage %notin% lineages$lineage)])
rm(list=ls())
test<-seqinr::read.alignment("~/Downloads/RABV.fasta", format = "fasta")
seqs_Asian<-read.csv("~/MADDOG/Datasets/Africa_N/Africa_N_sequence_data.csv")
seqs_Asian<-read.csv("~/MADDOG/Datasets/Asian_N/Asian_N_sequence_data.csv")
seqs_Arctic<-read.csv("~/MADDOG/Datasets/Arctic_N/Arctic_N_sequence_data.csv")
seqs_Africa<-read.csv("~/MADDOG/Datasets/Africa_N/Africa_N_sequence_data.csv")
seqs_Cosmo<-read.csv("~/MADDOG/Datasets/Cosmo_N/Cosmo_N_sequence_data.csv")
seqs_Vac<-read.csv("~/MADDOG/Datasets/Vac_N/Vac_N_sequence_data.csv")
seqs_Bat<-read.csv("~/MADDOG/Datasets/Bat_N/Bat_N_sequence_data.csv")
seqs_RAC<-read.csv("~/MADDOG/Datasets/RAC-SK_N/RAC-SK_N_sequence_data.csv")
seqs_Indian<-read.csv("~/MADDOG/Datasets/Indian_N/Indian_N_sequence_data.csv")
seqs<-rbind(seqs_Africa, seqs_Arctic, seqs_Asian, seqs_Bat, seqs_Cosmo, seqs_RAC, seqs_Vac, seqs_Indian)
"%notin%"<-Negate("%in%")
length(test$nam[which(test$nam %in% seqs$ID)])
length(test$nam[which(test$nam %notin% seqs$ID)])
test$nam[which(test$nam %notin% seqs$ID)]
yes<-seqs[which(seqs$ID %in% test$nam),]
no<-test$nam[which(test$nam %notin% seqs$ID)]
lineages<-read.csv("~/MADDOG/inst/extdata/References/RABV/lineage_info.csv")
length(unique(yes$lineage))
length(unique(yes$cluster))
length(which(lineages$lineage %in% yes$lineage))
length(which(lineages$lineage %in% yes$cluster))
relevant<-lineages[which(lineages$lineage %in% yes$cluster),]
View(relevant)
write.csv(yes, "~/Downloads/sequence_data.csv", row.names = F)
write.csv(relevant, "~/Downloads/relevant_lineages.csv", row.names = F)
meta<-read.csv("~/Downloads/WGS_new_meta.csv")
which(meta$sequence.sequenceID %in% no)
meta<-meta[which(meta$sequence.sequenceID %in% no),]
write.csv(meta, "~/Downloads/missing_meta.csv", row.names = F)
which(test$nam %in% no)
numbers<-which(test$nam %in% no)
seqinr::write.fasta(sequences = test$seq[numbers], names = test$nam[numbers], file.out = "~/Downloads/missing_seqs.fasta")
rm(list=ls())
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv("inst/extdata/References/RABV/reference_clusters.csv")
clusters <- read.csv("inst/extdata/References/RABV/lineage_info.csv")
setwd("~/MADDOG")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv("inst/extdata/References/RABV/reference_clusters.csv")
clusters <- read.csv("inst/extdata/References/RABV/lineage_info.csv")
args<-"test"
alignment<-seqinr::read.alignment(file = (paste(args, "/", args, "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$lineage == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
View(test_seq_assignment)
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$lineage == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
test_seq_assignment$lineage[i]
which(clusters$lineage == test_seq_assignment$lineage[i])
View(clusters)
rm(list=ls())
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv("inst/extdata/References/RABV/reference_clusters.csv")
clusters <- read.csv("inst/extdata/References/RABV/lineage_info.csv")
args<-"test"
alignment<-seqinr::read.alignment(file = (paste(args, "/", args, "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$lineage == test_seq_assignment$lineage[i])]
}
test_seq_assignment$lineage[i]
rm(list=ls())
args<-"test"
data <- read.csv("inst/extdata/References/RABV/reference_clusters.csv")
clusters <- read.csv("inst/extdata/References/RABV/lineage_info.csv")
alignment<-seqinr::read.alignment(file = (paste(args, "/", args, "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$lineage == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$lineage == test_seq_assignment$lineage[i])]
}
library(ggtree)
library(seqinr)
library(adephylo)
library(phangorn)
rm(list=ls())
library(ggtree)
library(seqinr)
library(adephylo)
library(phangorn)
tree<-read.tree("~/Downloads/EA_tests_2/AF1a_A1.1s.1/AF1a_A1.1_aligned.fasta.contree")
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
alignment<-read.alignment("~/Downloads/EA_tests_2/AF1a_A1.1s.1/AF1a_A1.1_aligned.fasta", format = "fasta")
sequence_data<-read.csv("~/Downloads/EA_tests_2/AF1a_A1.1s.1/seq_data_AF1a_A1.1.csv")
View(sequence_data)
View(alignment)
sequence_data<-read.csv("~/Downloads/EA_tests_2/AF1a_A1.1s.1/metadata_AF1a_A1.1.csv")
distances<-as.matrix(distTips(tree, tips = "all", method = "patristic"))
lineage_info<-data.frame(lineage = "Cosmopolitan AF1a_A1.1.1")
for (x in 1:length(lineage_info$lineage)) {
test<-sequence_data$ID[which(sequence_data$lineage == lineage_info$lineage[x])]
subset<-distances[which(colnames(distances) %in% test),which(rownames(distances) %in% test)]
subset<-as.data.frame(subset)
names<-names(which((apply(subset, 2, max)) == max(subset)))
names<-c(names, names(which((apply(subset, 1, max)) == max(subset))))
reference<-unique(names)
test<-(subset[which(rownames(subset) == reference[1]),])
test<-t(test)
if (length(test) %% 2 == 0) {
reference<-c(reference, rownames(test)[length(test)/2])
reference<-c(reference, rownames(test)[(length(test)/2)+1])
} else {
reference<-c(reference, rownames(test)[(length(test)+1)/2])
reference<-c(reference, NA)
}
reference<-unique(reference)
for (i in 1:4) {
reference_set$sequence[which(reference_set$lineage == lineage_info$lineage[x])[i]]<-reference[i]
}
}
numbers<-which(alignment$nam %in% reference_set$sequence)
numbers<-which(alignment$nam %in% names)
numbers<-which(alignment$nam %in% reference)
names
reference
write.fasta(sequences = alignment$seq[numbers], names = alignment$nam[numbers], file.out = "~/Downloads/AF1a_A1.1.1.fasta")
rm(list=ls())
tree<-read.tree("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta.contree")
alignment<-read.alignment("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta", format = "fasta")
sequence_data<-read.csv("~/Downloads/EA_tests_2/AF1b_F1s/metadata_AF1B_F1.1.csv")
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
distances<-as.matrix(distTips(tree, tips = "all", method = "patristic"))
lineage_info<-data.frame(lineage = "Cosmopolitan AF1b_F1")
for (x in 1:length(lineage_info$lineage)) {
test<-sequence_data$ID[which(sequence_data$lineage == lineage_info$lineage[x])]
subset<-distances[which(colnames(distances) %in% test),which(rownames(distances) %in% test)]
subset<-as.data.frame(subset)
names<-names(which((apply(subset, 2, max)) == max(subset)))
names<-c(names, names(which((apply(subset, 1, max)) == max(subset))))
reference<-unique(names)
test<-(subset[which(rownames(subset) == reference[1]),])
test<-t(test)
if (length(test) %% 2 == 0) {
reference<-c(reference, rownames(test)[length(test)/2])
reference<-c(reference, rownames(test)[(length(test)/2)+1])
} else {
reference<-c(reference, rownames(test)[(length(test)+1)/2])
reference<-c(reference, NA)
}
reference<-unique(reference)
for (i in 1:4) {
reference_set$sequence[which(reference_set$lineage == lineage_info$lineage[x])[i]]<-reference[i]
}
}
reference_set<-data.frame(lineage = lineages, sequence = NA)
numbers<-which(alignment$nam %in% reference)
alignment$nam[numbers]
write.fasta(sequences = alignment$seq[numbers], names = alignment$nam[numbers], file.out = "~/Downloads/AF1b_F1.fasta")
rm(list=ls())
tree<-read.tree("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta.contree")
alignment<-read.alignment("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta", format = "fasta")
sequence_data<-read.csv("~/Downloads/EA_tests_2/AF1b_F1s/metadata_AF1B_F1.1.csv")
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
distances<-as.matrix(distTips(tree, tips = "all", method = "patristic"))
lineage_info<-data.frame(lineage = "Cosmopolitan AF1b_F1.1")
for (x in 1:length(lineage_info$lineage)) {
test<-sequence_data$ID[which(sequence_data$lineage == lineage_info$lineage[x])]
subset<-distances[which(colnames(distances) %in% test),which(rownames(distances) %in% test)]
subset<-as.data.frame(subset)
names<-names(which((apply(subset, 2, max)) == max(subset)))
names<-c(names, names(which((apply(subset, 1, max)) == max(subset))))
reference<-unique(names)
test<-(subset[which(rownames(subset) == reference[1]),])
test<-t(test)
if (length(test) %% 2 == 0) {
reference<-c(reference, rownames(test)[length(test)/2])
reference<-c(reference, rownames(test)[(length(test)/2)+1])
} else {
reference<-c(reference, rownames(test)[(length(test)+1)/2])
reference<-c(reference, NA)
}
reference<-unique(reference)
for (i in 1:4) {
reference_set$sequence[which(reference_set$lineage == lineage_info$lineage[x])[i]]<-reference[i]
}
}
numbers<-which(alignment$nam %in% reference_set$sequence)
numbers<-which(alignment$nam %in% reference)
reference
write.fasta(sequences = alignment$seq[numbers], names = alignment$nam[numbers], file.out = "~/Downloads/AF1b_F1.1.fasta")
rm(list=ls())
tree<-read.tree("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta.contree")
alignment<-read.alignment("~/Downloads/EA_tests_2/AF1b_F1s/AF1b_F1s_aligned.fasta", format = "fasta")
sequence_data<-read.csv("~/Downloads/EA_tests_2/AF1b_F1s/metadata_AF1B_F1.1.csv")
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
lineage_info<-data.frame(lineage = "Cosmopolitan AF1b_F1.1.1")
for (x in 1:length(lineage_info$lineage)) {
test<-sequence_data$ID[which(sequence_data$lineage == lineage_info$lineage[x])]
subset<-distances[which(colnames(distances) %in% test),which(rownames(distances) %in% test)]
subset<-as.data.frame(subset)
names<-names(which((apply(subset, 2, max)) == max(subset)))
names<-c(names, names(which((apply(subset, 1, max)) == max(subset))))
reference<-unique(names)
test<-(subset[which(rownames(subset) == reference[1]),])
test<-t(test)
if (length(test) %% 2 == 0) {
reference<-c(reference, rownames(test)[length(test)/2])
reference<-c(reference, rownames(test)[(length(test)/2)+1])
} else {
reference<-c(reference, rownames(test)[(length(test)+1)/2])
reference<-c(reference, NA)
}
reference<-unique(reference)
for (i in 1:4) {
reference_set$sequence[which(reference_set$lineage == lineage_info$lineage[x])[i]]<-reference[i]
}
}
distances<-as.matrix(distTips(tree, tips = "all", method = "patristic"))
lineage_info<-data.frame(lineage = "Cosmopolitan AF1b_F1.1.1")
for (x in 1:length(lineage_info$lineage)) {
test<-sequence_data$ID[which(sequence_data$lineage == lineage_info$lineage[x])]
subset<-distances[which(colnames(distances) %in% test),which(rownames(distances) %in% test)]
subset<-as.data.frame(subset)
names<-names(which((apply(subset, 2, max)) == max(subset)))
names<-c(names, names(which((apply(subset, 1, max)) == max(subset))))
reference<-unique(names)
test<-(subset[which(rownames(subset) == reference[1]),])
test<-t(test)
if (length(test) %% 2 == 0) {
reference<-c(reference, rownames(test)[length(test)/2])
reference<-c(reference, rownames(test)[(length(test)/2)+1])
} else {
reference<-c(reference, rownames(test)[(length(test)+1)/2])
reference<-c(reference, NA)
}
reference<-unique(reference)
for (i in 1:4) {
reference_set$sequence[which(reference_set$lineage == lineage_info$lineage[x])[i]]<-reference[i]
}
}
numbers<-which(alignment$nam %in% reference)
reference
numbers<-c(1,6,22)
write.fasta(sequences = alignment$seq[numbers], names = alignment$nam[numbers], file.out = "~/Downloads/AF1b_F1.1.1.fasta")
rm(list=ls())
read.alignment("~/MADDOG/Kenya/unitid_14_09_2022.fasta", format = "fasta")
alignment<-read.alignment("~/MADDOG/Kenya/unitid_14_09_2022.fasta", format = "fasta")
meta<-read.csv("~/MADDOG/Kenya/metadata_MADDOG.csv")
"%notin%"<-Negate("%in%")
which(alignment$nam %notin% meta$ID)
which(meta$ID %notin% alignment$nam)
rm(list=ls())
args<-"Kenya"
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv("inst/extdata/References/RABV/reference_clusters.csv")
clusters <- read.csv("inst/extdata/References/RABV/lineage_info.csv")
alignment<-seqinr::read.alignment(file = (paste(args, "/", args, "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
View(clusters)
View(data)
rm(list=ls())
meta<-read.csv("~/MADDOG/Datasets/Cosmo_N/Cosmo_N_metadata.csv")
seq<-read.alignment("~/Downloads/EA_tests_2/consensus.fasta", format = "fasta")
which(seq$nam %in% meta$ID)
numbers<-which(seq$nam %in% meta$ID)
write.fasta(sequences = seq$seq[numbers], names = seq$nam[numbers], file.out = "~/Downloads/EA_tests_2/add.fasta")
View(seq)
length(numbers)
ref<-read.alignment("~/MADDOG/Datasets/Cosmo_N/Cosmo_N_aligned.fasta", format = "fasta")
WGS<-read.alignment("~/Documents/GitHub/Lineages/Cosmo_WGS/010321_Cosmo_WGS.fasta", format = "fasta")
View(WGS)
which(ref$nam %in% WGS$nam)
length(which(ref$nam %in% WGS$nam))
numbers_WGS<-which(ref$nam %in% WGS$nam
)
"%notin%"<-Negate("%in%")
numbers_N<-which(ref$nam %notin% WGS$nam)
which(WGS$nam %in% ref$nam[numbers_WGS])
WGS_match<-which(WGS$nam %in% ref$nam[numbers_WGS])
View(ref)
write.fasta(sequences = c(WGS$seq[WGS_match], ref$seq[numbers_N]),
names = c(WGS$nam[WGS_match], ref$nam[numbers_N]),
file.out = "~/MADDOG/Datasets/Cosmo_N/Cosmo.fasta")
rm(list=ls())
seqs<-read.alignment("~/MADDOG/Datasets/Cosmo_N/Cosmo.fasta", format = "fasta")
duplicated(seqs$nam)
which(duplicated(seqs$nam))
numbers<-which(duplicated(seqs$nam))
write.fasta(sequences = seqs$seq[-c(numbers)], names = seqs$nam[-c(numbers)],
file.out = "~/MADDOG/Datasets/Cosmo_N/Cosmo.fasta")
