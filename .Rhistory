rm(list=ls())
args<-"Query"
sequences<-seqinr::read.fasta(paste(args, "/", args, ".fasta", sep = ""))
setwd("~/MADDOG")
sequences<-seqinr::read.fasta(paste(args, "/", args, ".fasta", sep = ""))
assignments<-MADDOG::assign_lineages(sequences, "RABV")
write.csv(assignments, paste(args, "/", args, "_assignments.csv", sep = ""), row.names = F)
clades<-data.frame(clade=c("Africa", "Asian", "Arctic", "Bat", "Cosmopolitan", "Indian", "RAC"), present=NA)
assignments<-unique(assignments$lineage)
for (i in 1:length(clades$clade)) {
if (length(grep(clades$clade[i], assignments)) != 0) {
clades$present[i]<-"Y"
}
}
numbers<-which(clades$present == "Y")
sequences1<-NA
alignment1<-seqinr::as.alignment(NA)
metadata1<-NA
sequences2<-NA
alignment2<-seqinr::as.alignment(NA)
metadata2<-NA
sequences3<-NA
alignment3<-seqinr::as.alignment(NA)
metadata3<-NA
sequences4<-NA
alignment4<-seqinr::as.alignment(NA)
metadata4<-NA
sequences5<-NA
alignment5<-seqinr::as.alignment(NA)
metadata5<-NA
sequences6<-NA
alignment6<-seqinr::as.alignment(NA)
metadata6<-NA
sequences7<-NA
alignment7<-seqinr::as.alignment(NA)
metadata7<-NA
if (1 %in% numbers) {
sequences1<-read.csv("Datasets/Africa_N/Africa_N_sequence_data.csv")
alignment1<-seqinr::read.alignment("Datasets/Africa_N/Africa_N_aligned.fasta", format = "fasta")
metadata1<-read.csv("Datasets/Africa_N/Africa_N_metadata.csv")
}
if (2 %in% numbers) {
sequences2<-read.csv("Datasets/Asian_N/Asian_N_sequence_data.csv")
alignment2<-seqinr::read.alignment("Datasets/Asian_N/Asian_N_aligned.fasta", format = "fasta")
metadata2<-read.csv("Datasets/Asian_N/Asian_N_metadata.csv")
}
if (3 %in% numbers) {
sequences3<-read.csv("Datasets/Arctic_N/Arctic_N_sequence_data.csv")
alignment3<-seqinr::read.alignment("Datasets/Arctic_N/Arctic_N_aligned.fasta", format = "fasta")
metadata3<-read.csv("Datasets/Arctic_N/Arctic_N_metadata.csv")
}
if (4 %in% numbers) {
sequences4<-read.csv("Datasets/Bat_N/Bat_N_sequence_data.csv")
alignment4<-seqinr::read.alignment("Datasets/Bat_N/Bat_N_aligned.fasta", format = "fasta")
metadata4<-read.csv("Datasets/Bat_N/Bat_N_metadata.csv")
}
if (5 %in% numbers) {
sequences5<-read.csv("Datasets/Cosmo_N/Cosmo_N_sequence_data.csv")
alignment5<-seqinr::read.alignment("Datasets/Cosmo_N/Cosmo_N_aligned.fasta", format = "fasta")
metadata5<-read.csv("Datasets/Cosmo_N/Cosmo_N_metadata.csv")
}
if (6 %in% numbers) {
sequences6<-read.csv("Datasets/Indian_N/Indian_N_sequence_data.csv")
alignment6<-seqinr::read.alignment("Datasets/Indian_N/Indian_N_aligned.fasta", format = "fasta")
metadata6<-read.csv("Datasets/Indian_N/Indian_N_metadata.csv")
}
if (7 %in% numbers) {
sequences7<-read.csv("Datasets/RAC-SK_N/RAC-SK_N_sequence_data.csv")
alignment7<-seqinr::read.alignment("Datasets/RAC-SK_N/RAC-SK_N_aligned.fasta", format = "fasta")
metadata7<-read.csv("Datasets/RAC-SK_N/RAC-SK_N_metadata.csv")
}
metadata<-rbind(metadata1, metadata2, metadata3, metadata4, metadata5, metadata6, metadata7)
metadata<-metadata[-c(which(is.na(metadata$ID))),]
sequences<-rbind(sequences1, sequences2, sequences3, sequences4, sequences5, sequences6, sequences7)
sequences<-sequences[-c(which(is.na(sequences$ID))),]
align_nam<-c(alignment1$nam, alignment2$nam, alignment3$nam, alignment4$nam, alignment5$nam, alignment6$nam,
alignment7$nam)
align_seq<-c(alignment1$seq, alignment2$seq, alignment3$seq, alignment4$seq, alignment5$seq, alignment6$seq,
alignment7$seq)
alignment<-seqinr::as.alignment(nb=length(align_nam), nam = align_nam, seq = align_seq, com = NA)
assignments<-gsub("Cosmopolitan ", "", assignments)
assignments<-gsub("Cosmopolitan_", "", assignments)
int_seq<-sequences$ID[which(sequences$cluster %in% assignments)]
int_seq<-int_seq[which(int_seq %in% alignment$nam)]
int_seq<-int_seq[which(int_seq %in% metadata$ID)]
numbers<-which(alignment$nam %in% int_seq)
query_alignment<-seqinr::read.alignment(paste(args, "/", args, ".fasta", sep = ""), format = "fasta")
seqinr::write.fasta(sequences = c(alignment$seq[numbers], query_alignment$seq),
names = c(alignment$nam[numbers], query_alignment$nam),
file.out = paste(args, "/", args, "_combined.fasta", sep = ""))
query_metadata<-read.csv(paste(args, "/", args, "_metadata.csv", sep = ""))
metadata<-data.frame(ID=metadata$ID, year=metadata$year, country=metadata$country, assignment=metadata$assignment)
combined_metadata<-rbind(metadata, query_metadata)
write.csv(combined_metadata, paste(args, "/", args, "_combined_metadata.csv", sep = ""), row.names = F)
rm(list=ls())
args<-"Query"
tree<-ape::read.tree(paste(args, "/Trees/", args, "_combined_aligned.fasta.contree", sep = ""))
ancestral<-seqinr::read.alignment(paste(args, "/Timetree/ancestral_sequences.fasta", sep = ""), format = "fasta")
metadata<-read.csv(paste(args, "/", args, "_combined_metadata.csv", sep = ""))
alignment<-seqinr::read.alignment(paste(args, "/Alignment/", args, "_combined_aligned.fasta", sep = ""), format = "fasta")
node_data<-MADDOG::node_info(tree, 70, alignment, metadata, ancestral)
seq_data<-MADDOG::seq_designation(tree, 70, alignment, metadata, ancestral)
names(node_data)[5]<-"number"
for (i in 1:length(node_data$lineage)) {
seq_data$lineage[which(seq_data$lineage == node_data$lineage[i])]<-node_data$number[i]
}
lineage_info<-MADDOG::lineage_info(seq_data, metadata)
assignments<-read.csv(paste(args, "/", args, "_assignments.csv", sep = ""))
assignments$lineage<-gsub("Cosmopolitan ", "", assignments$lineage)
assignments$lineage<-gsub("Cosmopolitan_", "", assignments$lineage)
clades<-data.frame(clade=c("Africa", "Asian", "Arctic", "Bat", "Cosmopolitan", "Indian", "RAC"), present=NA)
assignments<-unique(assignments$lineage)
for (i in 1:length(clades$clade)) {
if (length(grep(clades$clade[i], assignments)) != 0) {
clades$present[i]<-"Y"
}
}
View(lineage_info)
View(clades)
tree<-ape::read.tree(paste(args, "/Trees/", args, "_combined_aligned.fasta.contree", sep = ""))
ancestral<-seqinr::read.alignment(paste(args, "/Timetree/ancestral_sequences.fasta", sep = ""), format = "fasta")
metadata<-read.csv(paste(args, "/", args, "_combined_metadata.csv", sep = ""))
alignment<-seqinr::read.alignment(paste(args, "/Alignment/", args, "_combined_aligned.fasta", sep = ""), format = "fasta")
node_data<-MADDOG::node_info(tree, 70, alignment, metadata, ancestral)
seq_data<-MADDOG::seq_designation(tree, 70, alignment, metadata, ancestral)
names(node_data)[5]<-"number"
for (i in 1:length(node_data$lineage)) {
seq_data$lineage[which(seq_data$lineage == node_data$lineage[i])]<-node_data$number[i]
}
lineage_info<-MADDOG::lineage_info(seq_data, metadata)
assignments<-read.csv(paste(args, "/", args, "_assignments.csv", sep = ""))
clades<-data.frame(clade=c("Africa", "Asian", "Arctic", "Bat", "Cosmopolitan", "Indian", "RAC"), present=NA)
assignments<-unique(assignments$lineage)
for (i in 1:length(clades$clade)) {
if (length(grep(clades$clade[i], assignments)) != 0) {
clades$present[i]<-"Y"
}
}
View(clades)
sequences1<-NA
sequences2<-NA
sequences1<-NA
sequences2<-NA
sequences3<-NA
sequences4<-NA
sequences5<-NA
sequences6<-NA
sequences7<-NA
if (1 %in% numbers) {
sequences1<-read.csv("Datasets/Africa_N/Africa_N_sequence_data.csv")
}
numbers<-which(clades$present == "Y")
if (1 %in% numbers) {
sequences1<-read.csv("Datasets/Africa_N/Africa_N_sequence_data.csv")
}
if (2 %in% numbers) {
sequences2<-read.csv("Datasets/Asian_N/Asian_N_sequence_data.csv")
}
if (3 %in% numbers) {
sequences3<-read.csv("Datasets/Arctic_N/Arctic_N_sequence_data.csv")
}
if (4 %in% numbers) {
sequences4<-read.csv("Datasets/Bat_N/Bat_N_sequence_data.csv")
}
if (5 %in% numbers) {
sequences5<-read.csv("Datasets/Cosmo_N/Cosmo_N_sequence_data.csv")
}
if (6 %in% numbers) {
sequences6<-read.csv("Datasets/Indian_N/Indian_N_sequence_data.csv")
}
if (7 %in% numbers) {
sequences7<-read.csv("Datasets/RAC-SK_N/RAC-SK_N_sequence_data.csv")
}
sequences<-rbind(sequences1, sequences2, sequences3, sequences4, sequences5, sequences6, sequences7)
sequences<-sequences[-c(which(is.na(sequences$ID))),]
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
```{r data_import, include=FALSE}
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
head(sequence_designation, 20)
defining_node_information
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
sequences<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_assignment/example.fasta", package = "MADDOG"))
assignments<-assign_lineages(sequences, "Cosmo_N"); assignments
assignments<-assign_lineages(sequences, "RABV"); assignments
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
if(length(grep("_", lineage_info$lineage)) != 0) {
if (length(which(lineages$subclade %in% letters)) != 0) {
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
}
}
clades<-unique(lineages$subclade)
if(length(grep("\\.", clades)) != 0 ) {
clades<-clades[-c(grep("\\.", clades))]
}
if (length(which(clades == "Cosmopolitan")) != 0) {
clades<-clades[-c(which(clades == "Cosmopolitan"))]
}
if (length(which(clades == "Asian")) != 0) {
clades<-clades[-c(which(clades == "Asian"))]
}
if (length(which(clades == "Bats")) != 0) {
clades<-clades[-c(which(clades == "Bats"))]
}
lineage<-lineage_info$lineage[-c(grep("_", lineage_info$lineage))]
cols<-RColorBrewer::brewer.pal(9, "Blues")
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[-c(grep("_", lineage_info$lineage))]<-pal
for (i in 1:length(clades)) {
lineage<-grep(clades[i], lineage_info$lineage)
cols<-RColorBrewer::brewer.pal(3, Colours[i])
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[(grep(clades[i], lineage_info$lineage))]<-pal
}
world<-rgdal::readOGR("inst/extdata/Shapefile/world-administrative-boundaries.shp")
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
world<-rgdal::readOGR("inst/extdata/Shapefile", "world-administrative-boundaries")
knitr::opts_chunk$set(echo = TRUE)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
knitr::opts_chunk$set(echo = TRUE)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
base<-rgdal::readOGR("inst/extdata/Shapefile", "world-administrative-boundaries")
base<-rgdal::readOGR("../inst/extdata/Shapefile", "world-administrative-boundaries")
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation, base)
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
head(sequence_designation, 20)
defining_node_information
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
sequences<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_assignment/example.fasta", package = "MADDOG"))
assignments<-assign_lineages(sequences, "RABV"); assignments
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
map<-rgdal::readOGR("../inst/extdata/Shapefile", "world-administrative-boundaries")
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation, map)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation, map)
library(MADDOG)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation, map)
install.packages("KathrynCampbell/MADDOG")
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
knitr::opts_chunk$set(echo = TRUE)
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
map<-rgdal::readOGR("../inst/extdata/Shapefile", "world-administrative-boundaries")
node_data<-defining_node_information
sequence_data<-sequence_designation
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
if(length(grep("_", lineage_info$lineage)) != 0) {
if (length(which(lineages$subclade %in% letters)) != 0) {
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
}
}
clades<-unique(lineages$subclade)
if(length(grep("\\.", clades)) != 0 ) {
clades<-clades[-c(grep("\\.", clades))]
}
if (length(which(clades == "Cosmopolitan")) != 0) {
clades<-clades[-c(which(clades == "Cosmopolitan"))]
}
if (length(which(clades == "Asian")) != 0) {
clades<-clades[-c(which(clades == "Asian"))]
}
if (length(which(clades == "Bats")) != 0) {
clades<-clades[-c(which(clades == "Bats"))]
}
lineage<-lineage_info$lineage[-c(grep("_", lineage_info$lineage))]
cols<-RColorBrewer::brewer.pal(9, "Blues")
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[-c(grep("_", lineage_info$lineage))]<-pal
for (i in 1:length(clades)) {
lineage<-grep(clades[i], lineage_info$lineage)
cols<-RColorBrewer::brewer.pal(3, Colours[i])
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[(grep(clades[i], lineage_info$lineage))]<-pal
}
if (map == "default"){
world<-rgdal::readOGR("../inst/extdata/Shapefile", "world-administrative-boundaries")
} else {
world<-map
}
map == "default"
missing(map)
rm(map)
missing(map)
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
devtools::build_vignettes()
devtools::build_vignettes()
