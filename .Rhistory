if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test != "NA"
is.na(test)
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
for (i in 1:length(test_seq_assignment$ID)) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
is.na(test_seq_assignment$lineage)
which(is.na(test_seq_assignment$lineage))
numbers<-1:length(test_seq_assignment)
numbers<-1:length(test_seq_assignment$ID)
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
View(test_seq_assignment)
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
devtools::document()
rm(list=ls())
devtools::document()
devtools::load_all()
if (!is.na(test)){
test<-c(down, up)
}
test<-1
if (!is.na(test)){
test<-c(down, up)
}
up<-1
down<-2
if (!is.na(test)){
test<-c(down, up)
}
test<-NA
if (!is.na(test)){
test<-c(down, up)
}
rm(list = ls())
sequences<-seqinr::read.fasta("brazil/Brazil.fasta")
reference<-"Cosmo_N"
source("R/mafft_reorder.R")
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
args<-"Example_assignment"
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
length(alignment)
length(alignment$seq)
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
length(down) != 0
View(alignment)
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
numbers<-1:length(test_seq_assignment$ID)
which(is.na(test_seq_assignment$lineage))
numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
is.na(test_seq_assignment$lineage)
which(is.na(test_seq_assignment$lineage))
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
rm(list=ls())
args<-"NGA_N_LIN_DESIGNATION"
library(MADDOG)
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
args<-"NGA_G_LIN_DESIGNATION"
library(MADDOG)
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
rm(list=ls())
args<-"NGA_G_LIN_DESIGNATION"
#############################################
#            IMPORT THE DATA                #
#############################################
#'
#'**TREE**
#'========================================================================================================
#' The tree must contain the element 'node.comment' which contains the bootstrap support/posterior support
#' And the element 'tip.label' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and alignment
#'=========================================================================================================
tree <- ape::read.tree(file = paste(args, "/Trees/", args, "_aligned.fasta.contree", sep = ""))
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::load_all()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
## ----data_import, include=FALSE-----------------------------------------------
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
## ----designation, results='hide'----------------------------------------------
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
## ----designation_outputs------------------------------------------------------
head(sequence_designation, 20)
defining_node_information
## ----lineage_info-------------------------------------------------------------
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
library(MADDOG)
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
MADDOG::sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
library(MADDOG)
knitr::opts_chunk$set(echo = TRUE)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
node_data<-defining_node_information
sequence_data<-sequence_designation
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
clades<-unique(lineages$subclade)
if(length(grep("\\.", clades)) != 0 ) {
clades<-clades[-c(grep("\\.", clades))]
}
if (length(which(clades == "Cosmopolitan")) != 0) {
clades<-clades[-c(which(clades == "Cosmopolitan"))]
}
if (length(which(clades == "Asian")) != 0) {
clades<-clades[-c(which(clades == "Asian"))]
}
if (length(which(clades == "Bats")) != 0) {
clades<-clades[-c(which(clades == "Bats"))]
}
lineage<-lineage_info$lineage[-c(grep("_", lineage_info$lineage))]
cols<-RColorBrewer::brewer.pal(9, "Blues")
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[-c(grep("_", lineage_info$lineage))]<-pal
for (i in 1:length(clades)) {
lineage<-grep(clades[i], lineage_info$lineage)
cols<-RColorBrewer::brewer.pal(3, Colours[i])
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[(grep(clades[i], lineage_info$lineage))]<-pal
}
View(lineage_info)
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
if (length(which(lineages$subclade %in% letters)) != 0) {
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
}
devtools::document()
devtools::load_all()
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
## ----designation, results='hide'----------------------------------------------
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
## ----lineage_info-------------------------------------------------------------
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
knitr::opts_chunk$set(echo = TRUE)
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
node_data<-defining_node_information
sequence_data<-sequence_designation
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
previous<-data.frame(assignment = unique(metadata$alignment.name), parent = "", n_seqs = NA)
View(metadata)
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
previous<-data.frame(assignment = unique(metadata$assignment), parent = "", n_seqs = NA)
View(previous)
previous$parent[1]<-""
for (i in 1:length(previous$assignment)) {
previous$n_seqs[i]<-length(which(metadata$alignment.name == previous$assignment[i]))
}
node_data<-node_data[order(node_data$lineage),]
node_data$parent<-NA
node_data$parent[1]<-""
for (i in 2:length(node_data$node)) {
if (length(which(node_data$node %in% treeio::ancestor(tree, node_data$node[i]))) == 0) {
node_data$parent[i]<-""
} else {
parent<-node_data$lineage[which(node_data$node %in% treeio::ancestor(tree, node_data$node[i]))]
node_data$parent[i]<-parent[length(parent)]
}
}
lineage_info$parent<-NA
for (i in 1:length(lineage_info$lineage)) {
lineage_info$parent[i]<-node_data$parent[which(node_data$lineage == lineage_info$lineage[i])]
}
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
devtools::build_vignettes()
