install_github("r-spatial/sf")
library(devtools)
install_github("r-spatial/sf")
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
library(sf)
library("MADDOG")
install_github("KathrynCampbell/MADDOG")
install_github("KathrynCampbell/MADDOG_package")
install.packages("sf")
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-ips::mafft(alignment, sequences, reorder)
alignment<-ips::mafft(alignment, sequences, add)
alignment<-ips::mafft(alignment, sequences, add = c("reorder"))
alignment<-ips::mafft(alignment, sequences, add = c("add"))
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
alignment<-ips::mafft(alignment, sequences, add = c("add"), options = --reorder)
alignment<-ips::mafft(alignment, sequences, add = c("add"), options = c("--reorder"))
alignment<-ips::mafft(alignment, sequences, add = c("add"), method = "retree 2")
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
adegenet::fasta2DNAbin(alignment)
matrix<-as.matrix(alignment)
adegenet::fasta2DNAbin(matrix)
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
View(alignment)
adegenet::fasta2DNAbin(matrix)
adegenet::fasta2DNAbin(alignment)
View(alignment)
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
as.list(alignment)
as.list(c(alignment, sequences))
as.list(alignment, sequences)
test<-as.list(alignment, sequences)
(alignment, sequences)
join(alignment, sequences)
devtools::install_github("shaunpwilkinson/insect")
library(insect)
join(alignment, sequences)
join(c(alignment, sequences))
library(MADDOG)
View(dnabin_to_fasta)
msa::as.fasta(alignment)
install.packages("msa")
install.packages("msaR")
msaR::as.fasta(alignment)
test<-msaR::as.fasta(c(alignment, sequences))
test<-msaR::as.fasta(alignment)
adegenet::fasta2DNAbin(test)
ape::as.DNAbin(test)
alignment<-seqinr::as.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta"
alignment<-seqinr::as.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta"
)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
test<-ape::as.DNAbin(alignment)
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
View(sequences)
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
View(alignment)
alignment<-ape::as.DNAbin(alignment)
test<-ape::as.DNAbin(alignment)
ape::as.DNAbin(sequences)
View(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
rm(list=ls())
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
test<-ape::as.DNAbin(c(alignment, sequences))
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
)
View(alignment)
test<-ape::as.DNAbin(alignment)
alignment<-seqinr::as.alignment(alignment)
sequences<-seqinr::as.alignment(sequences)
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
test<-ape::as.DNAbin(alignment)
seqinr::as.alignment(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
class(alignment)
alignment<-ape::as.DNAbin(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_N/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
class(alignment)
alignment<-ape::as.DNAbin(alignment)
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-ips::mafft(alignment, sequences, add = c("add"), method = "retree 2")
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
mafft
ips::mafft()
ips::mafft
rm(list=ls())
library(rgdal)
library(devtools)
library(MADDOG)
mafft
adegenet:mafft
ips::mafft
new_mafft<-function (x, y, add, method = "auto", maxiterate = 0, op = 1.53,
ep = 0, gt, options, thread = -1, exec, quiet, file)
{
if (!inherits(x, c("DNAbin", "AAbin")))
stop("'x' is not of class 'DNAbin' or 'AAbin'")
os <- .Platform$OS
if (missing(quiet))
quiet <- TRUE
qut <- ifelse(quiet, " --quiet ", " ")
if (missing(exec))
exec <- "/usr/local/bin/mafft"
maxiterate <- match.arg(as.character(maxiterate), c("0",
"2", "1000"))
if (is.matrix(x))
x <- as.list(x)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
method <- match.arg(method, c("auto", "localpair", "globalpair",
"genafpair", "parttree", "retree 1", "retree 2"))
if (missing(gt)) {
gt <- ""
}
else {
if (!inherits(gt, "phylo"))
stop("object \"gt\" is not of class \"phylo\"")
if (!all(names(x) %in% gt$tip.label))
stop("guide tree does not match sequence names")
gt$tip.label <- match(names(x), gt$tip.label)
if (is.null(gt$edge.length))
gt$edge.length <- rep(1, nrow(gt$edge))
phylo2mafft(gt, file = fns[4])
gt <- paste(" --treein", fns[4], "")
}
thread <- paste("--thread", thread)
thread <- paste(rep(" ", 2), collapse = thread)
if (missing(options)) {
options <- " "
}
else {
options <- match.arg(options, c("--adjustdirection",
"--adjustdirectionaccurately",
"--reorder"))
options <- paste(options, collapse = " ")
options <- paste(rep(" ", 2), collapse = options)
}
if (missing(y)) {
if (inherits(x, "DNAbin")) {
write.fas(x, fns[1])
}
if (inherits(x, "AAbin")) {
write.fas(x, fns[1])
}
call.mafft <- paste(exec, " --", method, " --", "maxiterate ",
maxiterate, qut, "--op ", op, " --ep ", ep, gt, options,
thread, fns[1], " > ", fns[3], sep = "")
}
else {
if (!inherits(y, c("DNAbin", "AAbin")))
stop("'y' is not of class 'DNAbin' or 'AAbin'")
if (is.matrix(y))
y <- as.list(y)
if (missing(add))
add <- "addprofile"
add <- match.arg(add, c("add", "addprofile"))
add <- paste("--", add, sep = "")
write.fas(x, fns[1])
write.fas(y, fns[2])
call.mafft <- paste(exec, qut, add, fns[2], fns[1], ">",
fns[3])
}
if (!quiet)
message(call.mafft)
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
else {
return(res)
}
}
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-ips::mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
alignment<-new_mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
library(ips)
alignment<-new_mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
rm(list=ls())
ref_align<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
os <- .Platform$OS
if (missing(quiet))
exec <- "/usr/local/bin/mafft"
exec <- "/usr/local/bin/mafft"
if {(is.matrix(sequences))
sequences <- as.list(sequences)
}
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
y <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add", fns[1], " --reorder", fns[2], " > ",
fns[3], sep = "")
if (!quiet)
message(call.mafft)
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
else {
return(res)
}
rm(list=ls())
ref_align<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
View(sequences)
View(ref_align)
View(sequences)
View(ref_align)
grep("q", ref_align$seq)
grep("q", sequences$seq)
View(sequences)
sequences$seq[2]
ref_align$seq[2]
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
fns[1]
rm(list=ls())
ref_align<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
View(ref_align)
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
return(res)
dnabin_to_fasta <- lapply(res, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
rm(list=ls())
mafft_reorder<-function(sequences, ref_align){
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
res <- lapply(res, function(x) as.character(x[1:length(x)]))
return(res)
}
ref_align<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-mafft_reorder(sequences, ref_align)
library(MADDOG)
devtools::load_all()
devtools::load_all(MADDOG)
devtools::load_all("MADDOG")
browseVignettes("MADDOG")
devtools::load_all("MADDOG")
browseVignettes("MADDOG")
devtools::install("MADDOG")
browseVignettes("MADDOG")
devtools::load_all()
devtools::load_all("MADDOG")
library(devtools)
install_github("kathryncampbell/MADDOG")
install.packages("MADDOG")
setRepositories()
setRepositories()
install.packages("MADDOG")
setRepositories()
install.packages("MADDOG")
install.packages("MADDOG")
ap<-available.packages()
View(ap)
"MADDOG" %in% rownames(ap)
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
library(remotes)
install_github("kathryncampbell/MADDOG")
install.packages("remotes")
install.packages("MADDOG")
options(download.file.method = "wget")
install.packages("MADDOG")
library(MADDOG)
library(devtools)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
browseVignettes(MADDOG)
browseVignettes(MADDOG)
browseVignettes("MADDOG")
library(ggplot2)
sessionInfo()
library(rgdal)
sessionInfo()
library(ggplot2)
rm(list=ls())
args = commandArgs(trailingOnly = T)
args = "Ethiopia"
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
#############################################
#            IMPORT THE DATA                #
#############################################
#'
#'**TREE**
#'========================================================================================================
#' The tree must contain the element 'node.comment' which contains the bootstrap support/posterior support
#' And the element 'tip.label' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and alignment
#'=========================================================================================================
tree <- ape::read.tree(file = paste(args, "/Trees/", args, "_aligned.fasta.contree", sep = ""))
setwd("~/MADDOG")
#############################################
#            IMPORT THE DATA                #
#############################################
#'
#'**TREE**
#'========================================================================================================
#' The tree must contain the element 'node.comment' which contains the bootstrap support/posterior support
#' And the element 'tip.label' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and alignment
#'=========================================================================================================
tree <- ape::read.tree(file = paste(args, "/Trees/", args, "_aligned.fasta.contree", sep = ""))
# Sequence names got messed up in MAFFT, need to fix these so they match metadata and alignment
# Also node comment is sometimes weird, fix it
# #KB- can replace above 2 lines with this:
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
#'**METADATA**
#'========================================================================================================
#' The metadata must contain the element 'year' which lists the collection year for each sequence
#' And the element 'ID' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the tree and alignment
#'=========================================================================================================
metadata <- read.csv(file = paste(args, "/", args, "_metadata.csv", sep = ""))
#'**ALIGNMENT**
#'========================================================================================================
#' The alignment must contain the element 'seq' which contains the sequences
#' And the element 'nam' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and tree
#'=========================================================================================================
alignment <- seqinr::read.alignment(file = (paste(args, "/Alignment/", args, "_aligned.fasta", sep = "")), format = "fasta")
# Sequence names got messed up in MAFFT, need to fix these so they match metadata and alignment
# #KB- can replace above 2 lines with this:
alignment$nam <- gsub("\\..*", "", alignment$nam, perl = T)
#'**TIMETREE**
#'========================================================================================================
#'
#'=========================================================================================================
ancestral <- seqinr::read.alignment(file = (paste(args, "/Timetree/ancestral_sequences.fasta", sep = "")), format = "fasta")
ancestral$nam <- gsub("\\..*", "", ancestral$nam, perl = T)
#############################################
#           RUN DESIGNATION                 #
#############################################
sequence_designation<-MADDOG::seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-MADDOG::node_info(tree, 90, alignment, metadata, ancestral)
lineage_info<-MADDOG::lineage_info(sequence_designation, metadata)
lineage_info$lineage<-gsub("B1_A1", "C1", lineage_info$lineage)
defining_node_information$lineage<-gsub("B1_A1", "C1", defining_node_information$lineage)
sequence_designation$lineage<-gsub("B1_A1", "C1", sequence_designation$lineage)
write.csv(sequence_designation, file = (paste(args, "/Outputs/", args, "_sequence_data.csv", sep = "")), row.names=F)
write.csv(defining_node_information, file = (paste(args, "/Outputs/", args, "_node_data.csv", sep = "")), row.names=F)
write.csv(lineage_info, file = (paste(args, "/Outputs/", args, "_lineage_info.csv", sep = "")), row.names=F)
MADDOG::sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
htmlwidgets::saveWidget(plotly::as_widget(new), paste(args, "/Figures/", args, "_sunburst.html", sep = ""))
new<-MADDOG::sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
htmlwidgets::saveWidget(plotly::as_widget(new), paste(args, "/Figures/", args, "_sunburst.html", sep = ""))
htmlwidgets::saveWidget(plotly::as_widget(new), paste(args, "/Figures/", args, "_sunburst.html", sep = ""))
plot_tree<-MADDOG::lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = plot_tree)
ggplot::ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = plot_tree)
ggtree::ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = plot_tree)
MADDOG::lineage_map(lineage_info, defining_node_information, tree, metadata, sequence_designation)
ggsave(paste(args, "/Figures/", args, "_lineage_map.png", sep = ""))
ggtree::ggsave(paste(args, "/Figures/", args, "_lineage_map.png", sep = ""))
