test<-NA
}
}
length(ref_align)
x > length(ref_align)
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
}
if (x > length(ref_align)){
test<-NA
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
test<-1
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test != "NA"
is.na(test)
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
for (i in 1:length(test_seq_assignment$ID)) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
is.na(test_seq_assignment$lineage)
which(is.na(test_seq_assignment$lineage))
numbers<-1:length(test_seq_assignment)
numbers<-1:length(test_seq_assignment$ID)
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
View(test_seq_assignment)
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
devtools::document()
rm(list=ls())
devtools::document()
devtools::load_all()
if (!is.na(test)){
test<-c(down, up)
}
test<-1
if (!is.na(test)){
test<-c(down, up)
}
up<-1
down<-2
if (!is.na(test)){
test<-c(down, up)
}
test<-NA
if (!is.na(test)){
test<-c(down, up)
}
rm(list = ls())
sequences<-seqinr::read.fasta("brazil/Brazil.fasta")
reference<-"Cosmo_N"
source("R/mafft_reorder.R")
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
args<-"Example_assignment"
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
length(alignment)
length(alignment$seq)
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
length(down) != 0
View(alignment)
rm(list=ls())
args<-c("Example_assignment", "Cosmo_N")
#'---------------------------------------------------------
#'title: Lineage Assignment Windows
#'author: Kathryn Campbell
#'date: 09/09/2021
#'---------------------------------------------------------
data <- read.csv(system.file("extdata", paste("References/", args[2], "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", args[2], "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-seqinr::read.alignment(file = (paste(args[1], "/", args[1], "_withref.fasta", sep = "")), format = "fasta")
`%notin%` <- Negate(`%in%`)
test_seqs<-which(alignment$nam %notin% data$ID)
test_seq_assignment<-data.frame(ID=alignment$nam[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(alignment$seq)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == alignment$nam[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(alignment$seq)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
numbers<-1:length(test_seq_assignment$ID)
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
numbers<-1:length(test_seq_assignment$ID)
which(is.na(test_seq_assignment$lineage))
numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
is.na(test_seq_assignment$lineage)
which(is.na(test_seq_assignment$lineage))
numbers<-1:length(test_seq_assignment$ID)
if (length(which(is.na(test_seq_assignment$lineage))) != 0) {
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
}
rm(list=ls())
args<-"NGA_N_LIN_DESIGNATION"
library(MADDOG)
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
args<-"NGA_G_LIN_DESIGNATION"
library(MADDOG)
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
rm(list=ls())
args<-"NGA_G_LIN_DESIGNATION"
#############################################
#            IMPORT THE DATA                #
#############################################
#'
#'**TREE**
#'========================================================================================================
#' The tree must contain the element 'node.comment' which contains the bootstrap support/posterior support
#' And the element 'tip.label' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and alignment
#'=========================================================================================================
tree <- ape::read.tree(file = paste(args, "/Trees/", args, "_aligned.fasta.contree", sep = ""))
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::load_all()
devtools::build_vignettes()
.Last.error.trace
