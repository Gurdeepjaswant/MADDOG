#'**ALIGNMENT**
#'========================================================================================================
#' The alignment must contain the element 'seq' which contains the sequences
#' And the element 'nam' which lists all the sequence ID's
#' These sequence ID's must match the sequence ID's in the metadata and tree
#'=========================================================================================================
alignment <- seqinr::read.alignment(file = (paste(args, "/Alignment/", args, "_aligned.fasta", sep = "")), format = "fasta")
# Sequence names got messed up in MAFFT, need to fix these so they match metadata and alignment
# #KB- can replace above 2 lines with this:
alignment$nam <- gsub("\\..*", "", alignment$nam, perl = T)
#'**TIMETREE**
#'========================================================================================================
#'
#'=========================================================================================================
ancestral <- seqinr::read.alignment(file = (paste(args, "/Timetree/ancestral_sequences.fasta", sep = "")), format = "fasta")
ancestral$nam <- gsub("\\..*", "", ancestral$nam, perl = T)
#'**TIMETREE**
#'========================================================================================================
#'
#'=========================================================================================================
ancestral <- seqinr::read.alignment(file = (paste(args, "/Timetree/ancestral_sequences.fasta", sep = "")), format = "fasta")
ancestral$nam <- gsub("\\..*", "", ancestral$nam, perl = T)
#############################################
#           RUN DESIGNATION                #
#############################################
sequence_designation<-MADDOG::seq_designation(tree, 90, alignment, metadata, ancestral)
min.support<-90
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
alignment_matrix <- seqinr::as.matrix.alignment(alignment)
ancestral_matrix <- seqinr::as.matrix.alignment(ancestral)
sequences <- 10
max.support<-100
`%notin%` <- Negate(`%in%`)
#############################################
#            BOOTSTRAP SUPPORT              #
#############################################
# Identify nodes with a bootstrap of over 70 (why would the first ~570 nodes be NA?)
nodes_70 <- which(tree$node.comment > min.support | tree$node.comment == max.support)
nodes_70 <- nodes_70 + length(tree$tip.label)
node_data <- data.frame(Node = nodes_70, n_tips = NA)
for(i in 1:length(nodes_70)) {
node_data[i,2] <- length(phangorn::Descendants(tree, nodes_70[i], type = "tips")[[1]])
}
nodes_5 <- node_data[(which(node_data[,2]>= sequences)),]
#############################################
#            95% COVERAGE WGS               #
#############################################
# Make a dataframe ready to fill with info about number of gaps and N bases, and length of the alignment and sequence
seq_data <- data.frame(ID = alignment$nam, N = NA, "gap" = NA,
Length_before = nchar(alignment$seq[[1]]), Length_after = NA)
for (i in 1:length(alignment$seq)) {
seq_data$N[i] <- stringr::str_count(alignment$seq[[i]], pattern = 'n')
seq_data$gap[i] <- stringr::str_count(alignment$seq[[i]], pattern = '-')
seq_data$Length_after[i] <- (seq_data$Length_before[i] - seq_data$N[i] - seq_data$gap[i])
}
nodes_remove <- phangorn::Ancestors(tree,
(which(tree$tip.label
%in% (seq_data$ID[which(seq_data$Length_after < (seq_data$Length_before * 0.95))])
)),
'all')
if (length(nodes_remove)>0) {
removes <- nodes_remove[[1]]
for (i in 2:(length(nodes_remove))) {
removes <- c(removes, nodes_remove[[i]])
}
remove_counts <- data.frame(table(removes))
# Make a table to count the number the removed sequences descended from each node (e.g. for the deeper nodes, all 10 are descended)
names(remove_counts) <-c('Node', 'freq')
# Change the names
remove_counts$Node <- as.integer(levels(remove_counts$Node))
# Need to change this, or it creates many levels and causes errors
new_remove <- remove_counts[which(remove_counts[,1] %in% nodes_5[,1]),]; new_remove
# Not all nodes are included in the nodes_5 data (some are already excluded)
# Get rid of the nodes not in the nodes_5 data
nodes_new<-nodes_5
for (i in new_remove$Node) {
nodes_new[which(nodes_new == i), 2] <-(nodes_5[which(nodes_5 == i), 2] - (new_remove[which(new_remove == i), 2]))
}
# Take away the number of removed tips from the previous total number of tips calculated for each node
nodes_5 <- nodes_new[(which(nodes_new[,2] >= sequences)),] # Redo this to remove any that now have less than 5, and write over the old nodes_5 so this is updated with the new tip numbers
}
#############################################
#         DIFFERENCE FROM ANCESTOR          #
#############################################
seq_data$Year <- NA # Add another column to the seq data ready to fill in dates
# Add collection year of each sequence to the table (Use latest, as exact collection not always filled in)
for (i in 1:length(alignment$seq)) {
seq_data$Year[i] <- metadata$year[which(metadata$ID == seq_data$ID[i])]
}
View(metadata)
View(seq_data)
which(metadata$ID == seq_data$ID[i])
which(seq_data$ID %notin% metadata$ID)
seq_data$ID[which(seq_data$ID %notin% metadata$ID)]
library(MADDOG)
seqinr::read.alignment("brazil/Brazil.fasra", format = "fasta")
sequences<-seqinr::read.alignment("brazil/Brazil.fasta", format = "fasta")
reference<-"Cosmo_N"
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
source("R/mafft_reorder.R")
alignment<-mafft_reorder(sequences, ref_align)
View(ref_align)
View(sequences)
sequences<-seqinr::read.fasta("brazil/Brazil.fasta")
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
}
test<-c(down, up)
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
View(alignment)
which(data$ID == "DQ875051")
data$cluster[22]
which(data$ID == "FJ228545")
data$cluster[46]
which(data$ID == "FJ228544")
data$cluster[45]
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
for (i in 1:length(test_seq_assignment$ID)) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
rm(list = ls())
sequences<-seqinr::read.fasta("brazil/Brazil.fasta")
reference<-"Cosmo_N"
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
source("R/mafft_reorder.R")
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
}
if (x > length(ref_align)){
test<-NA
}
}
length(ref_align)
x > length(ref_align)
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
}
if (x > length(ref_align)){
test<-NA
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
test<-1
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (test != "NA"){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
test != "NA"
is.na(test)
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
for (i in 1:length(test_seq_assignment$ID)) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
is.na(test_seq_assignment$lineage)
which(is.na(test_seq_assignment$lineage))
numbers<-1:length(test_seq_assignment)
numbers<-1:length(test_seq_assignment$ID)
numbers<-numbers[-c(  which(is.na(test_seq_assignment$lineage)))]
View(test_seq_assignment)
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
for (i in numbers) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
View(test_seq_assignment)
devtools::document()
rm(list=ls())
devtools::document()
devtools::load_all()
if (!is.na(test)){
test<-c(down, up)
}
test<-1
if (!is.na(test)){
test<-c(down, up)
}
up<-1
down<-2
if (!is.na(test)){
test<-c(down, up)
}
test<-NA
if (!is.na(test)){
test<-c(down, up)
}
rm(list = ls())
sequences<-seqinr::read.fasta("brazil/Brazil.fasta")
reference<-"Cosmo_N"
source("R/mafft_reorder.R")
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
test<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
if (x > length(ref_align)){
test<-NA
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
if (y > length(ref_align)){
test<-NA
break
}
}
if (!is.na(test)){
test<-c(down, up)
}
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
View(test_seq_assignment)
