join(alignment, sequences)
devtools::install_github("shaunpwilkinson/insect")
library(insect)
join(alignment, sequences)
join(c(alignment, sequences))
library(MADDOG)
View(dnabin_to_fasta)
msa::as.fasta(alignment)
install.packages("msa")
install.packages("msaR")
msaR::as.fasta(alignment)
test<-msaR::as.fasta(c(alignment, sequences))
test<-msaR::as.fasta(alignment)
adegenet::fasta2DNAbin(test)
ape::as.DNAbin(test)
alignment<-seqinr::as.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta"
alignment<-seqinr::as.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta"
)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
test<-ape::as.DNAbin(alignment)
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
View(sequences)
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
View(alignment)
alignment<-ape::as.DNAbin(alignment)
test<-ape::as.DNAbin(alignment)
ape::as.DNAbin(sequences)
View(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
rm(list=ls())
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
test<-ape::as.DNAbin(c(alignment, sequences))
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
)
View(alignment)
test<-ape::as.DNAbin(alignment)
alignment<-seqinr::as.alignment(alignment)
sequences<-seqinr::as.alignment(sequences)
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
alignment<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
test<-ape::as.DNAbin(alignment)
seqinr::as.alignment(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
class(alignment)
alignment<-ape::as.DNAbin(alignment)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_N/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
alignment$nb<-alignment$nb + sequences$nb
alignment$nam<-c(alignment$nam, sequences$nam)
alignment$seq<-c(alignment$seq, sequences$seq)
class(alignment)
alignment<-ape::as.DNAbin(alignment)
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-ips::mafft(alignment, sequences, add = c("add"), method = "retree 2")
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
mafft
ips::mafft()
ips::mafft
rm(list=ls())
library(rgdal)
library(devtools)
library(MADDOG)
mafft
adegenet:mafft
ips::mafft
new_mafft<-function (x, y, add, method = "auto", maxiterate = 0, op = 1.53,
ep = 0, gt, options, thread = -1, exec, quiet, file)
{
if (!inherits(x, c("DNAbin", "AAbin")))
stop("'x' is not of class 'DNAbin' or 'AAbin'")
os <- .Platform$OS
if (missing(quiet))
quiet <- TRUE
qut <- ifelse(quiet, " --quiet ", " ")
if (missing(exec))
exec <- "/usr/local/bin/mafft"
maxiterate <- match.arg(as.character(maxiterate), c("0",
"2", "1000"))
if (is.matrix(x))
x <- as.list(x)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
method <- match.arg(method, c("auto", "localpair", "globalpair",
"genafpair", "parttree", "retree 1", "retree 2"))
if (missing(gt)) {
gt <- ""
}
else {
if (!inherits(gt, "phylo"))
stop("object \"gt\" is not of class \"phylo\"")
if (!all(names(x) %in% gt$tip.label))
stop("guide tree does not match sequence names")
gt$tip.label <- match(names(x), gt$tip.label)
if (is.null(gt$edge.length))
gt$edge.length <- rep(1, nrow(gt$edge))
phylo2mafft(gt, file = fns[4])
gt <- paste(" --treein", fns[4], "")
}
thread <- paste("--thread", thread)
thread <- paste(rep(" ", 2), collapse = thread)
if (missing(options)) {
options <- " "
}
else {
options <- match.arg(options, c("--adjustdirection",
"--adjustdirectionaccurately",
"--reorder"))
options <- paste(options, collapse = " ")
options <- paste(rep(" ", 2), collapse = options)
}
if (missing(y)) {
if (inherits(x, "DNAbin")) {
write.fas(x, fns[1])
}
if (inherits(x, "AAbin")) {
write.fas(x, fns[1])
}
call.mafft <- paste(exec, " --", method, " --", "maxiterate ",
maxiterate, qut, "--op ", op, " --ep ", ep, gt, options,
thread, fns[1], " > ", fns[3], sep = "")
}
else {
if (!inherits(y, c("DNAbin", "AAbin")))
stop("'y' is not of class 'DNAbin' or 'AAbin'")
if (is.matrix(y))
y <- as.list(y)
if (missing(add))
add <- "addprofile"
add <- match.arg(add, c("add", "addprofile"))
add <- paste("--", add, sep = "")
write.fas(x, fns[1])
write.fas(y, fns[2])
call.mafft <- paste(exec, qut, add, fns[2], fns[1], ">",
fns[3])
}
if (!quiet)
message(call.mafft)
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
else {
return(res)
}
}
alignment<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-adegenet::fasta2DNAbin("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-ips::mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
alignment<-new_mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
library(ips)
alignment<-new_mafft(alignment, sequences, add = c("add"), method = "retree 2", options = "--reorder")
dnabin_to_fasta <- lapply(alignment, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
alignment<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
rm(list=ls())
ref_align<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
os <- .Platform$OS
if (missing(quiet))
exec <- "/usr/local/bin/mafft"
exec <- "/usr/local/bin/mafft"
if {(is.matrix(sequences))
sequences <- as.list(sequences)
}
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
y <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add", fns[1], " --reorder", fns[2], " > ",
fns[3], sep = "")
if (!quiet)
message(call.mafft)
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
else {
return(res)
}
rm(list=ls())
ref_align<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta", format = "fasta")
sequences<-seqinr::read.alignment("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta", format = "fasta")
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
View(sequences)
View(ref_align)
View(sequences)
View(ref_align)
grep("q", ref_align$seq)
grep("q", sequences$seq)
View(sequences)
sequences$seq[2]
ref_align$seq[2]
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
fns[1]
rm(list=ls())
ref_align<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
View(ref_align)
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
if (!missing(file)) {
write.fas(res, file)
}
return(res)
dnabin_to_fasta <- lapply(res, function(x) as.character(x[1:length(x)]))
View(dnabin_to_fasta)
rm(list=ls())
mafft_reorder<-function(sequences, ref_align){
os <- .Platform$OS
exec <- "/usr/local/bin/mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
write.fas(sequences, fns[1])
write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- read.dna(fns[3], format = "fasta")
}
}
unlink(fns[file.exists(fns)])
res <- lapply(res, function(x) as.character(x[1:length(x)]))
return(res)
}
ref_align<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/References/Cosmo_WGS/Alignment/reference_aligned.fasta")
sequences<-seqinr::read.fasta("~/Documents/GitHub/MADDOG/Example_assignment/example.fasta")
alignment<-mafft_reorder(sequences, ref_align)
library(MADDOG)
devtools::load_all()
devtools::load_all(MADDOG)
devtools::load_all("MADDOG")
browseVignettes("MADDOG")
devtools::load_all("MADDOG")
browseVignettes("MADDOG")
devtools::install("MADDOG")
browseVignettes("MADDOG")
devtools::load_all()
devtools::load_all("MADDOG")
library(devtools)
install_github("kathryncampbell/MADDOG")
install.packages("MADDOG")
setRepositories()
setRepositories()
install.packages("MADDOG")
setRepositories()
install.packages("MADDOG")
install.packages("MADDOG")
ap<-available.packages()
View(ap)
"MADDOG" %in% rownames(ap)
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
library(remotes)
install_github("kathryncampbell/MADDOG")
install.packages("remotes")
install.packages("MADDOG")
options(download.file.method = "wget")
install.packages("MADDOG")
library(MADDOG)
library(devtools)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
browseVignettes(MADDOG)
browseVignettes(MADDOG)
browseVignettes("MADDOG")
rm(list=ls())
args = c("Example_assignment", "Cosmo_WGS")
sequences<-args[1]
reference<-args[2]
assignments<-MADDOG::assign_lineages(args[1], args[2])
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
rm(list=ls())
args = c("Example_assignment", "Cosmo_WGS")
sequences <- seqinr::read.alignment(file = (paste(args[1], "/", args[1], ".fasta", sep = "")), format = "fasta")
rm(list=ls())
args = c("Example_assignment", "Cosmo_WGS")
sequences <- seqinr::read.alignment(file = (paste(args[1], "/", args[1], ".fasta", sep = "")), format = "fasta")
setwd("~/MADDOG")
sequences <- seqinr::read.alignment(file = (paste(args[1], "/", args[1], ".fasta", sep = "")), format = "fasta")
assignments<-MADDOG::assign_lineages(sequences, args[2])
sequences <- seqinr::read.sequence(file = (paste(args[1], "/", args[1], ".fasta", sep = "")), format = "fasta")
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")), format = "fasta")
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
rm(list=ls())
args = c("Example_assignment", "Cosmo_WGS")
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
assignments<-MADDOG::assign_lineages(sequences, args[2])
View(assignments)
help(MADDOG)
Sys.info()
Sys.info()['sysname']
.Platform$OS.type
os <- .Platform$OS
mafft
ips::mafft
devtools::load_all()
devtools::load_all()
args = c("Example_assignment", "Cosmo_WGS")
sequences <- seqinr::read.fasta(file = (paste(args[1], "/", args[1], ".fasta", sep = "")))
assignments<-MADDOG::assign_lineages(sequences, args[2])
write.csv(assignments, file = (paste(args[1], "/", args[1], "_assignment.csv", sep = "")))
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
reference<-args[2]
ref_align<-seqinr::read.fasta(system.file("extdata", paste("References/", reference, "/reference_aligned.fasta", sep = ""), package = "MADDOG"))
data <- read.csv(system.file("extdata", paste("References/", reference, "/reference_clusters.csv", sep = ""), package = "MADDOG"))
clusters <- read.csv(system.file("extdata", paste("References/", reference, "/lineage_info.csv", sep = ""), package = "MADDOG"))
alignment<-mafft_reorder(sequences, ref_align)
library(MADDOG)
alignment<-mafft_reorder(sequences, ref_align)
`%notin%` <- Negate(`%in%`)
test_seqs<-which(row.names(alignment) %notin% data$ID)
test_seq_assignment<-data.frame(ID=row.names(alignment)[test_seqs], lineage = NA)
calculate_mode <- function(x) {
uniqx<-unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
for (i in 1:length(test_seqs)){
x<-1
y<-1
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-1)])]
repeat {
down<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]-(1+x))])]
x<-x+1
if (length(down) != 0){
break
}
}
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+1)])]
repeat {
up<-data$cluster[which(data$ID == row.names(alignment)[(test_seqs[i]+(1+y))])]
y<-y+1
if (length(up) != 0){
break
}
}
test<-c(down, up)
test_seq_assignment$lineage[i]<-calculate_mode(test)
}
test_seq_assignment$lineage_countries_seen<-NA
test_seq_assignment$lineage_first_seen<-NA
test_seq_assignment$lineage_last_seen<-NA
for (i in 1:length(test_seq_assignment$ID)) {
test_seq_assignment$lineage_countries_seen[i]<-clusters$country[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_first_seen[i]<-clusters$year_first[which(clusters$cluster == test_seq_assignment$lineage[i])]
test_seq_assignment$lineage_last_seen[i]<-clusters$year_last[which(clusters$cluster == test_seq_assignment$lineage[i])]
}
return(test_seq_assignment)
os <- .Platform$OS
if (os == "unix")
exec <- "/usr/local/bin/mafft"
if (os == "windows")
exec <- "C:\\Windows\\System32\\wsl.exe mafft"
if (os == "unix")
exec <- "/usr/local/bin/mafft"
if (os == "windows")
exec <- "C:\\Windows\\System32\\wsl.exe mafft"
sequences <- as.list(sequences)
fns <- vector(length = 4)
for (i in seq_along(fns)) fns[i] <- tempfile(pattern = "mafft",
tmpdir = tempdir(), fileext = ".fas")
unlink(fns[file.exists(fns)])
ref_align <- as.list(ref_align)
ips::write.fas(sequences, fns[1])
ips::write.fas(ref_align, fns[2])
call.mafft <- paste(exec, " --add ", fns[1], " --reorder ", fns[2], " > ",
fns[3], sep = "")
if (os == "unix") {
system(call.mafft, intern = FALSE, ignore.stdout = FALSE)
res <- (file.info(fns[3])$size > 1)
if (res != 0) {
res <- ape::read.dna(fns[3], format = "fasta")
}
}
else {
res <- system(call.mafft, intern = TRUE, ignore.stderr = FALSE)
if (length(grep("error|ERROR", res))) {
res <- 0
}
else {
res <- ape::read.dna(fns[3], format = "fasta")
}
}
devtools::load_all()
devtools::install_github("KathrynCampbell/MADDOG", dependencies = F)
devtools::document()
devtools::document()
rm(list=ls())
devtools::load_all()
devtools::document()
