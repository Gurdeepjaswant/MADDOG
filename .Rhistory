if (sequence_data$ID[i] %in% assignments$ID) {
sequence_data$new[i]<-"Y"
} else {
sequence_data$new[i]<-"N"
}
}
lineage_info<-lineage_info[order(lineage_info$lineage),]
plot_tree<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(colour = "grey50", size=4)  +
ggtree::geom_tippoint(ggplot2::aes(color=lineage), size=3)  +
ggtree::theme(plot.title = ggplot2::element_text(size = 40, face = "bold"))+
ggtree::scale_color_manual(values=c(lineage_info$colour)) +
ggtree::theme(legend.position = "none")
genotype<-data.frame(lineage = sequence_data$lineage)
rownames(genotype)<-sequence_data$ID
plot_tree<-ggtree::gheatmap(plot_tree, genotype, offset=0.01, width=.1, font.size=3, color = NA,
colnames_angle=-45, hjust=0) +
ggtree::scale_fill_manual(values=c(lineage_info$colour), name="lineage")+
ggtree::theme(legend.position = "none")
plot_new<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(ggplot2::aes(color=new), size=5)  +
scale_color_manual(values = c("#808080", "red"))
ggplot2::ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = gridExtra::arrangeGrob(plot_tree, plot_new, ncol = 2))
}
updates<-data.frame(lineage = current$lineage, count = NA, node = NA, old=NA)
for (i in 1:length(updates$lineage)) {
updates$count[i]<-length(which(assignments$lineage == updates$lineage[i]))
}
length(which(updates$count >=10))!= 0
updates<-updates[which(updates$count >= 10),]
for (i in 1:length(updates$lineage)) {
updates$node[i]<-ape::getMRCA(tree, tip = c(assignments$ID[which(assignments$lineage == updates$lineage[i])]))
}
if (length(which(duplicated(updates$node))) != 0) {
updates<-updates[-c(which(duplicated(updates$node))),]
}
updates$viable<-NA
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
if(length(which(updates$viable <= 0)) != 0) {
updates<-updates[-c(which(updates$viable <= 0)),]
}
existing<-updates
updates<-updates[order(updates$viable),]
test<-data.frame(lineage = NA, count = NA, node = NA, viable = NA)
numbers<-which(updates$viable > 0)
x<-1
while (length(numbers) != 0 && x < 100) {
test<-data.frame(lineage = NA, count = NA, node = NA, viable = NA, old = NA)
for (i in 1:length(numbers)) {
test$node<-node_data$node[which(node_data$node %in% phangorn::Descendants(tree, updates$node[numbers[i]], type = "all"))][1]
test$lineage<-paste(updates$lineage[numbers[i]], ".1", sep = "")
updates<-rbind(updates, test)
}
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
if (length(which(duplicated(updates$node))) != 0) {
updates<-updates[-c(which(duplicated(updates$node))),]
}
int<-updates[-c(which(updates$lineage %in% existing$lineage)),]
int<-rbind(int, updates[which(duplicated(updates$lineage)),])
problem_names<-data.frame(letters = c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1"))
numbers<-grep("\\..\\..\\..", int$lineage)
for (i in 1:length(numbers)) {
updates$old[which(updates$lineage == int$lineage[numbers[i]])]<-int$lineage[numbers[i]]
}
int$update<-int$lineage
int$update<-stringr::str_replace(int$update, "A1\\..\\..\\..", "B1")
int$update<-stringr::str_replace(int$update, "B1\\..\\..\\..", "C1")
int$update<-stringr::str_replace(int$update, "C1\\..\\..\\..", "D1")
int$update<-stringr::str_replace(int$update, "D1\\..\\..\\..", "E1")
int$update<-stringr::str_replace(int$update, "E1\\..\\..\\..", "F1")
int$update<-stringr::str_replace(int$update, "F1\\..\\..\\..", "G1")
int$update<-stringr::str_replace(int$update, "G1\\..\\..\\..", "H1")
int$update<-stringr::str_replace(int$update, "H1\\..\\..\\..", "I1")
int$update<-stringr::str_replace(int$update, "I1\\..\\..\\..", "J1")
int$update<-stringr::str_replace(int$update, "J1\\..\\..\\..", "K1")
int$update<-stringr::str_replace(int$update, "K1\\..\\..\\..", "L1")
int$update<-stringr::str_replace(int$update, "L1\\..\\..\\..", "M1")
int$update<-stringr::str_replace(int$update, "M1\\..\\..\\..", "N1")
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% c(all_lineage$lineage, existing$lineage))])
problems<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") == 0)]
duplicates<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") != 0)]
while (length(duplicates != 0)) {
for (i in 1:length(duplicates)) {
test<-which(int$update == duplicates[i])
x<-1
for (j in 1:length(test)) {
name<-unlist(stringr::str_split(int$update[test[j]], "\\."))
name[length(name)]<-x+as.integer(name[length(name)])
x<-(x+1)
int$update[test[j]]<-paste(c(name), collapse='.' )
}
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% all_lineage$lineage)])
duplicates<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") != 0)]
}
}
while (length(problems != 0)) {
for (i in 1:length(problems)) {
test<-which(int$update == problems[i])
if(length(strsplit(problems[i], "_")[[1]]) != 1){
subclade<-strsplit(problems[i], "_")[[1]][1]
lineage<-strsplit(problems[i], "_")[[1]][2]
lineage<-problem_names$letters[(which(problem_names$letters == lineage))+1]
int$update[test[1]]<-paste(subclade, lineage, sep = "_")
} else {
int$update[test[1]]<-problem_names$letters[(which(problem_names$letters == problems[i]))+1]
}
}
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% all_lineage$lineage)])
problems<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") == 0)]
}
for (i in 1:length(int$lineage)) {
updates$lineage[which(updates$node == int$node[i])]<-int$update[i]
}
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
numbers<-which(updates$viable > 0)
x<-x+1
}
updates<-updates[-c(which(updates$lineage %in% sequences$cluster)),]
node_updates<-data.frame()
node_data$lineage<-NA
for (i in 1:length(updates$lineage)) {
node_updates<-rbind(node_updates, node_data[which(node_data$Node == updates$node[i]),])
node_updates$lineage[i]<-updates$lineage[i]
}
updates<-data.frame(lineage = current$lineage, count = NA, node = NA, old=NA)
for (i in 1:length(updates$lineage)) {
updates$count[i]<-length(which(assignments$lineage == updates$lineage[i]))
}
if (length(which(updates$count >=10))!= 0) {
updates<-updates[which(updates$count >= 10),]
for (i in 1:length(updates$lineage)) {
updates$node[i]<-ape::getMRCA(tree, tip = c(assignments$ID[which(assignments$lineage == updates$lineage[i])]))
}
if (length(which(duplicated(updates$node))) != 0) {
updates<-updates[-c(which(duplicated(updates$node))),]
}
updates$viable<-NA
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
if(length(which(updates$viable <= 0)) != 0) {
updates<-updates[-c(which(updates$viable <= 0)),]
}
if (length(updates$lineage) != 0) {
existing<-updates
updates<-updates[order(updates$viable),]
test<-data.frame(lineage = NA, count = NA, node = NA, viable = NA)
numbers<-which(updates$viable > 0)
x<-1
while (length(numbers) != 0 && x < 100) {
test<-data.frame(lineage = NA, count = NA, node = NA, viable = NA, old = NA)
for (i in 1:length(numbers)) {
test$node<-node_data$node[which(node_data$node %in% phangorn::Descendants(tree, updates$node[numbers[i]], type = "all"))][1]
test$lineage<-paste(updates$lineage[numbers[i]], ".1", sep = "")
updates<-rbind(updates, test)
}
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
if (length(which(duplicated(updates$node))) != 0) {
updates<-updates[-c(which(duplicated(updates$node))),]
}
int<-updates[-c(which(updates$lineage %in% existing$lineage)),]
int<-rbind(int, updates[which(duplicated(updates$lineage)),])
problem_names<-data.frame(letters = c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1"))
numbers<-grep("\\..\\..\\..", int$lineage)
for (i in 1:length(numbers)) {
updates$old[which(updates$lineage == int$lineage[numbers[i]])]<-int$lineage[numbers[i]]
}
int$update<-int$lineage
int$update<-stringr::str_replace(int$update, "A1\\..\\..\\..", "B1")
int$update<-stringr::str_replace(int$update, "B1\\..\\..\\..", "C1")
int$update<-stringr::str_replace(int$update, "C1\\..\\..\\..", "D1")
int$update<-stringr::str_replace(int$update, "D1\\..\\..\\..", "E1")
int$update<-stringr::str_replace(int$update, "E1\\..\\..\\..", "F1")
int$update<-stringr::str_replace(int$update, "F1\\..\\..\\..", "G1")
int$update<-stringr::str_replace(int$update, "G1\\..\\..\\..", "H1")
int$update<-stringr::str_replace(int$update, "H1\\..\\..\\..", "I1")
int$update<-stringr::str_replace(int$update, "I1\\..\\..\\..", "J1")
int$update<-stringr::str_replace(int$update, "J1\\..\\..\\..", "K1")
int$update<-stringr::str_replace(int$update, "K1\\..\\..\\..", "L1")
int$update<-stringr::str_replace(int$update, "L1\\..\\..\\..", "M1")
int$update<-stringr::str_replace(int$update, "M1\\..\\..\\..", "N1")
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% c(all_lineage$lineage, existing$lineage))])
problems<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") == 0)]
duplicates<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") != 0)]
while (length(duplicates != 0)) {
for (i in 1:length(duplicates)) {
test<-which(int$update == duplicates[i])
x<-1
for (j in 1:length(test)) {
name<-unlist(stringr::str_split(int$update[test[j]], "\\."))
name[length(name)]<-x+as.integer(name[length(name)])
x<-(x+1)
int$update[test[j]]<-paste(c(name), collapse='.' )
}
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% all_lineage$lineage)])
duplicates<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") != 0)]
}
}
while (length(problems != 0)) {
for (i in 1:length(problems)) {
test<-which(int$update == problems[i])
if(length(strsplit(problems[i], "_")[[1]]) != 1){
subclade<-strsplit(problems[i], "_")[[1]][1]
lineage<-strsplit(problems[i], "_")[[1]][2]
lineage<-problem_names$letters[(which(problem_names$letters == lineage))+1]
int$update[test[1]]<-paste(subclade, lineage, sep = "_")
} else {
int$update[test[1]]<-problem_names$letters[(which(problem_names$letters == problems[i]))+1]
}
}
duplicates<-int$update[which(duplicated(int$update))]
duplicates<-c(duplicates, int$update[which(int$update %in% all_lineage$lineage)])
problems<-duplicates[which(stringr::str_count(duplicates, pattern = "\\.") == 0)]
}
for (i in 1:length(int$lineage)) {
updates$lineage[which(updates$node == int$node[i])]<-int$update[i]
}
for (i in 1:length(updates$lineage)) {
updates$viable[i]<-
length(which(node_data$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) -
(length(which(updates$node %in% phangorn::Descendants(tree, updates$node[i], type = "all"))) +
length(which(current$node[-c(which(current$node %in% node_data$node))]
%in% phangorn::Descendants(tree, updates$node[i], type = "all")))
)
}
numbers<-which(updates$viable > 0)
x<-x+1
}
updates<-updates[-c(which(updates$lineage %in% sequences$cluster)),]
node_updates<-data.frame()
node_data$lineage<-NA
for (i in 1:length(updates$lineage)) {
node_updates<-rbind(node_updates, node_data[which(node_data$node == updates$node[i]),])
node_updates$lineage[i]<-updates$lineage[i]
}
for (i in 1:length(node_updates$node)) {
seq_data$lineage[which(seq_data$lineage == node_updates$number[i])]<-node_updates$lineage[i]
}
for (i in 1:length(node_updates$node)) {
lineage_info$lineage[which(lineage_info$lineage == node_updates$number[i])]<-node_updates$lineage[i]
}
if (length(which(lineage_info$lineage %in% 1:1000)) != 0) {
lineage_info<-lineage_info[-c(which(lineage_info$lineage %in% 1:1000)),]
}
numbers<-which(assignments$ID %in% seq_data$ID[which(seq_data$lineage %in% 1:1000)])
for (i in 1:length(numbers)) {
seq_data$lineage[which(seq_data$ID == assignments$ID[numbers[i]])]<-assignments$lineage[numbers[i]]
}
if (length(which(is.na(seq_data$lineage))) != 0) {
seq_data<-seq_data[-c(which(is.na(seq_data$lineage))),]
}
if (length(which(seq_data$lineage %in% 1:1000)) != 0) {
seq_data<-seq_data[-c(which(seq_data$lineage %in% 1:1000)),]
}
new_seq<-seq_data[which(seq_data$ID %in% assignments$ID),]
all_lineage<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
all_lineage<-all_lineage[which(all_lineage$lineage %in% assignments$lineage),]
lineage_info$parent<-NA
numbers<-grep("\\.", lineage_info$lineage)
if (length(grep("\\.", lineage_info$lineage))!=0){
for (i in 1:length(numbers)) {
parent<-strsplit(lineage_info$lineage[grep("\\.", lineage_info$lineage)], "\\.")[[i]]
parent<-parent[1:length(parent)-1]
if (length(parent) == 1) {
lineage_info$parent[numbers[i]]<-parent
} else {
parent<-paste(parent[1], parent[2], sep = ".")
lineage_info$parent[numbers[i]]<-parent
}
}
}
numbers<-which(is.na(lineage_info$parent))
if(length(numbers) != 0){
for (i in 1:length(numbers)) {
x<-which(updates$lineage == lineage_info$lineage[numbers[i]])
lineage_info$parent[numbers[i]]<-
paste(strsplit(updates$old[x], "\\.")[[1]][1], strsplit(updates$old[x], "\\.")[[1]][2],
strsplit(updates$old[x], "\\.")[[1]][3], sep = ".")
}
}
total_lineages<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
"%notin%"<-Negate("%in%")
issues<-unique(all_lineage$parent[which(all_lineage$parent %notin% all_lineage$lineage)])
big_names<-c("RABV")
if (length(which(issues %in% big_names)) != 0 ) {
issues<-issues[-c(which(issues %in% big_names))]
}
while (length(issues) != 0) {
all_lineage<-rbind(all_lineage, total_lineages[which(total_lineages$lineage %in% issues),])
issues<-unique(all_lineage$parent[which(all_lineage$parent %notin% all_lineage$lineage)])
if (length(which(issues %in% big_names)) != 0 ) {
issues<-issues[-c(which(issues %in% big_names))]
}
}
for (i in 1:length(all_lineage$lineage)) {
all_lineage$n_seqs[i]<-length(which(new_seq$lineage == all_lineage$lineage[i]))
}
write.csv(lineage_info, paste(args, "/Outputs/new_lineages.csv", sep = ""), row.names = F)
write.csv(all_lineage, paste(args, "/Outputs/relevant_lineages.csv", sep = ""), row.names = F)
write.csv(new_seq, paste(args, "/Outputs/sequence_data.csv", sep = ""), row.names = F)
}
node_data<-data.frame(lineage=c(current$lineage, updates$lineage), node = c(current$node, updates$node))
all_lineage<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
all_lineage<-all_lineage[which(all_lineage$lineage %in% sequences$cluster),]
for (i in 1:length(all_lineage$lineage)) {
all_lineage$n_seqs[i]<-length(which(assignments$lineage == all_lineage$lineage[i]))
}
total_lineages<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
"%notin%"<-Negate("%in%")
issues<-unique(all_lineage$parent[which(all_lineage$parent %notin% all_lineage$lineage)])
big_names<-c("RABV")
if (length(which(issues %in% big_names)) != 0 ) {
issues<-issues[-c(which(issues %in% big_names))]
}
while (length(issues) != 0) {
all_lineage<-rbind(all_lineage, total_lineages[which(total_lineages$lineage %in% issues),])
issues<-unique(all_lineage$parent[which(all_lineage$parent %notin% all_lineage$lineage)])
if (length(which(issues %in% big_names)) != 0 ) {
issues<-issues[-c(which(issues %in% big_names))]
}
}
lineages<-data.frame(lineage = c(all_lineage$lineage, lineage_info$lineage),
parent = c(all_lineage$parent, lineage_info$parent),
n_seqs = c(all_lineage$n_seqs, lineage_info$n_seqs))
lineage_info<-lineages
if(length(which(duplicated(lineage_info))) != 0) {
lineage_info<-lineage_info[-c(which(duplicated(lineage_info))),]
}
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
if(length(grep("_", lineage_info$lineage)) != 0) {
if (length(which(lineages$subclade %in% letters)) != 0) {
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
}
}
clades<-unique(lineages$subclade)
if(length(grep("\\.", clades)) != 0 ) {
clades<-clades[-c(grep("\\.", clades))]
}
lineage<-lineage_info$lineage[-c(grep("_", lineage_info$lineage))]
cols<-RColorBrewer::brewer.pal(9, "Blues")
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[-c(grep("_", lineage_info$lineage))]<-pal
for (i in 1:length(clades)) {
lineage<-grep(clades[i], lineage_info$lineage)
cols<-RColorBrewer::brewer.pal(3, Colours[i])
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[(grep(clades[i], lineage_info$lineage))]<-pal
}
new<-plotly::plot_ly(
labels = c(lineage_info$lineage),
parents = c(lineage_info$parent),
values = c(lineage_info$n_seqs),
type = "sunburst",
marker = list(colors = (lineage_info$colour))
)
htmlwidgets::saveWidget(plotly::as_widget(new), (paste(args, "/Figures/", args, "_sunburst.html", sep = "")))
sequences<-sequences[which(sequences$ID %in% tree$tip.label),]
sequence_data<-data.frame(ID = c(sequences$ID, new_seq$ID), lineage = c(sequences$cluster, new_seq$lineage))
for (i in 1:length(sequence_data$ID)) {
if (sequence_data$ID[i] %in% assignments$ID) {
sequence_data$new[i]<-"Y"
} else {
sequence_data$new[i]<-"N"
}
}
plot_tree<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(colour = "grey50", size=4)  +
ggtree::geom_tippoint(ggplot2::aes(color=lineage), size=3)  +
ggtree::theme(plot.title = ggplot2::element_text(size = 40, face = "bold"))+
ggtree::scale_color_manual(values=c(lineage_info$colour)) +
ggtree::theme(legend.position = "none")
genotype<-data.frame(lineage = sequence_data$lineage)
rownames(genotype)<-sequence_data$ID
plot_tree<-ggtree::gheatmap(plot_tree, genotype, offset=0.01, width=.1, font.size=3, color = NA,
colnames_angle=-45, hjust=0) +
ggtree::scale_fill_manual(values=c(lineage_info$colour), name="lineage")+
ggtree::theme(legend.position = "none")
plot_new<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(ggplot2::aes(color=new), size=5)  +
scale_color_manual(values = c("#808080", "red"))
ggplot2::ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = gridExtra::arrangeGrob(plot_tree, plot_new, ncol = 2))
} else {
print("No new lineages. Relevent existing lineage information in Outputs/relevant_lineages.csv with individual sequence assignments in assignment file.")
all_lineage<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
all_lineage<-all_lineage[which(all_lineage$lineage %in% assignments$lineage),]
write.csv(all_lineage, paste(args, "/Outputs/relevant_lineages.csv", sep = ""), row.names = F)
all_lineage<-read.csv("inst/extdata/References/RABV/lineage_info.csv")
all_lineage<-all_lineage[which(all_lineage$lineage %in% sequences$cluster),]
for (i in 1:length(all_lineage$lineage)) {
all_lineage$n_seqs[i]<-length(which(assignments$lineage == all_lineage$lineage[i]))
}
node_data<-current
sequence_data<-assignments
lineage_info<-all_lineage
lineage_info$colour<-NA
Colours<-c("Reds","Purples","YlOrBr","PuBuGn","YlOrRd","OrRd","PuBu","Pastel1","Greens","Greys",
"GnBu","BuGn","RdPu","Oranges","BuPu","YlGn","PuRd","YlGnBu")
lineages<-data.frame(lineage = lineage_info$lineage, subclade = NA)
for (i in 1:length(lineages$lineage)) {
lineages$subclade[i]<-strsplit(lineages$lineage[i], "_")[[1]][1]
}
letters <- c("A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "M1", "N1",
"O1", "P1", "Q1", "R1", "S1", "T1", "U1", "V1", "W1", "X1", "Y1", "Z1")
if(length(grep("_", lineage_info$lineage)) != 0) {
if (length(which(lineages$subclade %in% letters)) != 0) {
lineages<-lineages[-c(which(lineages$subclade %in% letters)),]
}
}
clades<-unique(lineages$subclade)
if(length(grep("\\.", clades)) != 0 ) {
clades<-clades[-c(grep("\\.", clades))]
}
lineage<-lineage_info$lineage[-c(grep("_", lineage_info$lineage))]
cols<-RColorBrewer::brewer.pal(9, "Blues")
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[-c(grep("_", lineage_info$lineage))]<-pal
for (i in 1:length(clades)) {
lineage<-grep(clades[i], lineage_info$lineage)
cols<-RColorBrewer::brewer.pal(3, Colours[i])
pal<-colorRampPalette(c(cols))
pal<-rev(pal(length(lineage)))
lineage_info$colour[(grep(clades[i], lineage_info$lineage))]<-pal
}
new<-plotly::plot_ly(
labels = c(lineage_info$lineage),
parents = c(lineage_info$parent),
values = c(lineage_info$n_seqs),
type = "sunburst",
marker = list(colors = (lineage_info$colour))
)
htmlwidgets::saveWidget(plotly::as_widget(new), (paste(args, "/Figures/", args, "_sunburst.html", sep = "")))
sequences<-sequences[which(sequences$ID %in% tree$tip.label),]
sequence_data<-data.frame(ID = c(sequences$ID, assignments$ID), lineage = c(sequences$cluster, assignments$lineage))
for (i in 1:length(sequence_data$ID)) {
if (sequence_data$ID[i] %in% assignments$ID) {
sequence_data$new[i]<-"Y"
} else {
sequence_data$new[i]<-"N"
}
}
lineage_info<-lineage_info[order(lineage_info$lineage),]
plot_tree<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(colour = "grey50", size=4)  +
ggtree::geom_tippoint(ggplot2::aes(color=lineage), size=3)  +
ggtree::theme(plot.title = ggplot2::element_text(size = 40, face = "bold"))+
ggtree::scale_color_manual(values=c(lineage_info$colour)) +
ggtree::theme(legend.position = "none")
genotype<-data.frame(lineage = sequence_data$lineage)
rownames(genotype)<-sequence_data$ID
plot_tree<-ggtree::gheatmap(plot_tree, genotype, offset=0.01, width=.1, font.size=3, color = NA,
colnames_angle=-45, hjust=0) +
ggtree::scale_fill_manual(values=c(lineage_info$colour), name="lineage")+
ggtree::theme(legend.position = "none")
plot_new<-ggtree::ggtree(tree, colour = "grey50", ladderize = T) %<+% sequence_data +
ggtree::geom_tippoint(ggplot2::aes(color=new), size=5)  +
scale_color_manual(values = c("#808080", "red"))
ggplot2::ggsave(paste(args, "/Figures/", args, "_lineage_tree.png", sep = ""),
plot = gridExtra::arrangeGrob(plot_tree, plot_new, ncol = 2))
}
